AWSTemplateFormatVersion: "2010-09-09"
Description: This is a IAM stack which creates neccessary roles and permissions.
Parameters:
  Environment:
    Type: String
  ProjectName:
    Type: String
  S3LogBucket:
    Type: String

Resources:
  BluegreenDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-bluegreen-application-deploy-service
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      Policies:
        - PolicyName: SES_Limit_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - ses:SendEmail
              - ses:SendRawEmail
              Resource: "*"
        - PolicyName: S3_Limited_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: s3:*
              Resource:
              - arn:aws:s3:::exported-maps
              - arn:aws:s3:::exported-maps/*
        #       - arn:aws:s3:::reblie-assets
        #       - arn:aws:s3:::reblie-assets/*
        #       - arn:aws:s3:::reblie.assets
        #       - arn:aws:s3:::reblie.assets/*
        - PolicyName: EXEC_SSM_Permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-ecsTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      Policies:
        - PolicyName: SES_Limit_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - ses:SendEmail
              - ses:SendRawEmail
              Resource: "*"
        - PolicyName: S3_Limited_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: s3:*
              Resource:
              - arn:aws:s3:::exported-maps
              - arn:aws:s3:::exported-maps/*
              - arn:aws:s3:::reblie.assets
              - arn:aws:s3:::reblie.assets/*
        - PolicyName: EXEC_SSM_Permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              Resource: "*"
            
  CloudtrailIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CloudtrailRoleForCloudWatachLogs_${ProjectName}-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: !Sub "CloudTrailPolicyForCloudWatchLogs-${ProjectName}-${Environment}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AWSCloudTrailCreateLogStream
              Effect: Allow
              Action:
              - logs:CreateLogStream
              Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectName}-${Environment}-aws-cloudtrail-logs:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*
            - Sid: AWSCloudTrailPutLogEvents
              Effect: Allow
              Action:
              - logs:PutLogEvents
              Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectName}-${Environment}-aws-cloudtrail-logs:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*
  
  CloudtrailS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "cloudtrail-${AWS::Region}-${ProjectName}-${Environment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        -
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
          BucketKeyEnabled: true
      LoggingConfiguration:
        DestinationBucketName: !Ref S3LogBucket
        LogFilePrefix: !Sub "cloudtrail-${AWS::Region}-${ProjectName}-${Environment}/"
      VersioningConfiguration:
        Status: "Enabled"
      OwnershipControls:
        Rules:
        -
          ObjectOwnership: "BucketOwnerEnforced"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudtrailS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudTrailBucketPolicy
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${CloudtrailS3Bucket}
            Condition:
              StringEquals:
                aws:SourceArn: !Sub arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ProjectName}-${Environment}
          - Sid: CloudTrailBucketPolicyWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${CloudtrailS3Bucket}/cloud-trail-${AWS::Region}-${ProjectName}-${Environment}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:SourceArn: !Sub arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ProjectName}-${Environment}
          
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
            - !Join ['', [!GetAtt CloudtrailS3Bucket.Arn, '/*']]
            - !GetAtt CloudtrailS3Bucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  CloudtrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProjectName}-${Environment}-aws-cloudtrail-logs

  CloudTrail:
    Type: "AWS::CloudTrail::Trail"
    Properties:
      TrailName: !Sub "${ProjectName}-${Environment}"
      S3BucketName: !Ref CloudtrailS3Bucket
      S3KeyPrefix: !Sub "cloud-trail-${AWS::Region}-${ProjectName}-${Environment}"
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true
      IsLogging: true
      KMSKeyId: !GetAtt CloudTrailKMSkey.Arn
      CloudWatchLogsLogGroupArn: !GetAtt CloudtrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudtrailIAMRole.Arn
      EventSelectors:
        - ReadWriteType: WriteOnly
          IncludeManagementEvents: false
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub "arn:aws:s3:::${ProjectName}-combined-pipeline-artifact-${Environment}/imagedefinitions.json" 
    DependsOn: 
      - CloudtrailS3Bucket
      - CloudTrailBucketPolicy
  
  CloudTrailKMSkeyAlias:
    Type: AWS::KMS::Alias
    Properties: 
      AliasName: !Sub "alias/${ProjectName}-${Environment}"
      TargetKeyId: !Ref CloudTrailKMSkey
  
  CloudTrailKMSkey:
    Type: "AWS::KMS::Key"
    Properties:
      Enabled: true
      EnableKeyRotation: true
      Description: !Sub "${ProjectName}-${Environment}"
      KeyUsage: "ENCRYPT_DECRYPT"
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: Key policy created by CloudTrail
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
              - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ProjectName}-${Environment}"
              StringLike:
                kms:EncryptionContext:aws:cloudtrail:arn: !Sub "arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*"
          - Sid: Allow CloudTrail to describe key
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: kms:DescribeKey
            Resource: "*"
          - Sid: Allow principals in the account to decrypt log files
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Sub "${AWS::AccountId}"
              StringLike:
                kms:EncryptionContext:aws:cloudtrail:arn: "arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*"
          - Sid: Allow alias creation during setup
            Effect: Allow
            Principal:
              AWS: "*"
            Action: kms:CreateAlias
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "ec2.${AWS::Region}.amazonaws.com"
                kms:CallerAccount: !Sub "${AWS::AccountId}"
          - Sid: Enable cross account log decryption
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Sub "${AWS::AccountId}"
              StringLike:
                kms:EncryptionContext:aws:cloudtrail:arn: !Sub "arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*"

  #CodeBuild IAM Roles
  APICodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codebuild-${ProjectName}-build-api-service-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref APICodebuildCustomManagedPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: lambda_invoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: lambda:InvokeFunction
              Resource: "*"
        - PolicyName: S3_PUT_Object
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: s3:PutObject
              Resource: "*"

  AdminCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codebuild-${ProjectName}-build-admin-service-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AdminCodebuildCustomManagedPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: lambda_invoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: lambda:InvokeFunction
              Resource: "*"
        - PolicyName: S3_PUT_Object
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: s3:PutObject
              Resource: "*"

  AppCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codebuild-${ProjectName}-build-app-service-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AppCodebuildCustomManagedPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: lambda_invoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: lambda:InvokeFunction
              Resource: "*"
        - PolicyName: S3_PUT_Object
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: s3:PutObject
              Resource: "*"

  #CodePipline IAM Roles:
  APICodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AWSCodePipelineServiceRole-${ProjectName}-api-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref APICodepipelineCustomManagedPolicy

  AdminCodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AWSCodePipelineServiceRole-${ProjectName}-admin-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AdminCodepipelineCustomManagedPolicy

  AppCodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AWSCodePipelineServiceRole-${ProjectName}-app-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AppCodepipelineCustomManagedPolicy

  FinalCodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AWSCodePipelineServiceRole-${ProjectName}-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref FinalCodepipelineCustomManagedPolicy

  #CloudWatchevent IAM Role
  APICWEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cwe-role-${AWS::Region}-${ProjectName}-api-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref APIPipelineexecuteCustomManagedPolicy

  AdminCWEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cwe-role-${AWS::Region}-${ProjectName}-admin-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AdminPipelineexecuteCustomManagedPolicy

  AppCWEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cwe-role-${AWS::Region}-${ProjectName}-app-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref AppPipelineexecuteCustomManagedPolicy

  CombinedCWEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cwe-role-${AWS::Region}-${ProjectName}-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref FinalPipelineexecuteCustomManagedPolicy

  #CloudwatcheventPolicy:
  APIPipelineexecuteCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub start-pipeline-execution-${ProjectName}-api-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource:
            - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-api-${Environment}

  AdminPipelineexecuteCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub start-pipeline-execution-${ProjectName}-admin-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource:
            - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-admin-${Environment}

  AppPipelineexecuteCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub start-pipeline-execution-${ProjectName}-app-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource:
            - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-app-${Environment}

  FinalPipelineexecuteCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub start-pipeline-execution-${ProjectName}-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource:
            - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}

  #Cloudwatch rule
  CombinedpipelineEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Amazon CloudWatch Events rule to automatically start your pipeline when
        a change occurs in the Amazon S3 object key or S3 folder. Deleting this
        may prevent changes from being detected in that pipeline. Read more:
        http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-about-starting.html
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - CompleteMultipartUpload
            - CopyObject
          requestParameters:
            bucketName:
              - !Sub "${ProjectName}-combined-pipeline-artifact-${Environment}"
            key:
              - imagedefinitions.json
      Name: !Sub codepipeline-${ProjectName}-${Environment}-event-rule
      State: ENABLED
      Targets:
        - Id: !Sub codepipeline-${ProjectName}-${Environment}
          Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/cwe-role-${AWS::Region}-${ProjectName}-${Environment}


  #CodeBuildbasePolicy
  APICodebuildCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub CodeBuildBasePolicy-${ProjectName}-build-api-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-api
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-api:*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          - Effect: Allow
            Action:
            - codebuild:CreateReportGroup
            - codebuild:CreateReport
            - codebuild:UpdateReport
            - codebuild:BatchPutTestCases
            - codebuild:BatchPutCodeCoverages
            Resource:
            - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ProjectName}-${Environment}-build-api-*

  AdminCodebuildCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub CodeBuildBasePolicy-${ProjectName}-build-admin-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-admin
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-admin:*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          - Effect: Allow
            Action:
            - codebuild:CreateReportGroup
            - codebuild:CreateReport
            - codebuild:UpdateReport
            - codebuild:BatchPutTestCases
            - codebuild:BatchPutCodeCoverages
            Resource:
            - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ProjectName}-${Environment}-build-admin-*

  AppCodebuildCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub CodeBuildBasePolicy-${ProjectName}-build-app-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-app
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-build-app:*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          - Effect: Allow
            Action:
            - codebuild:CreateReportGroup
            - codebuild:CreateReport
            - codebuild:UpdateReport
            - codebuild:BatchPutTestCases
            - codebuild:BatchPutCodeCoverages
            Resource:
            - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ProjectName}-${Environment}-build-app-*

  #CodePipelineBasePolicy:
  APICodepipelineCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AWSCodePipelineServiceRole-${ProjectName}-api-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"

  AdminCodepipelineCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AWSCodePipelineServiceRole-${ProjectName}-admin-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"

  AppCodepipelineCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AWSCodePipelineServiceRole-${ProjectName}-app-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"

  FinalCodepipelineCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AWSCodePipelineServiceRole-${ProjectName}-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"

  #Custom_resource_lambda_fuction_has_to_be_added_manually&lambda_function_name_should_be_same_in_all_accound
  CloudtrailS3BucketDeletion:
    Type: Custom::CloudtrailS3BucketDeletion
    Properties:
      bucket_name: !Ref CloudtrailS3Bucket
      ServiceToken: !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:S3bucketDelete"
