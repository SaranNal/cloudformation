AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  CodeStarConnectionID:
    Type: String

Resources:
  SamDeployS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${ProjectName}-sam-artifacts-${Environment}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        -
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
          BucketKeyEnabled: true
      VersioningConfiguration:
        Status: "Enabled"
      OwnershipControls:
        Rules:
        -
          ObjectOwnership: "BucketOwnerEnforced"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  #Custom_resource_lambda_fuction_has_to_be_added_manually&lambda_function_name_should_be_same_in_all_accound
  SamDeployS3BucketDeletion:
    Type: Custom::SamDeployS3BucketDeletion
    Properties:
      bucket_name: !Ref SamDeployS3Bucket
      ServiceToken: !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:S3bucketDelete"

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SamDeployS3Bucket
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service: "serverlessrepo.amazonaws.com"
          Action: "s3:GetObject"
          Resource: !Sub "arn:aws:s3:::${ProjectName}-sam-artifacts-${Environment}/*"
          Condition:
            StringEquals:
              "aws:SourceAccount": !Sub "${AWS::AccountId}"
        -
          Effect: "Deny"
          Principal: "*"
          Action: "s3:*"
          Resource:
          - !Sub "arn:aws:s3:::${ProjectName}-sam-artifacts-${Environment}/*"
          - !Sub "arn:aws:s3:::${ProjectName}-sam-artifacts-${Environment}"
          Condition:
            Bool:
              "aws:SecureTransport": "false"

  #LogGroups:
  SAMBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${ProjectName}-${Environment}-sam-deploy

  #CodeBuild IAM Roles
  SAMCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codebuild-${ProjectName}-${Environment}-sam-deploy-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref SAMCodebuildCustomManagedPolicy
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: Lambda_Base_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - lambda:CreateFunction
                - lambda:UpdateFunctionCode
                - lambda:InvokeFunction
                - lambda:ListTags
                - lambda:GetFunction
                - lambda:DeleteFunction
                - lambda:TagResource
                - lambda:AddPermission
                - lambda:RemovePermission
              Resource: "*"
        - PolicyName: S3_Base_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
              Resource: "*"
        - PolicyName: IAM_base_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - iam:CreatePolicy
                - iam:GetRole
                - iam:PassRole
                - iam:GetPolicy
                - iam:DeleteRolePolicy
                - iam:CreateRole
                - iam:AttachRolePolicy
                - iam:PutRolePolicy
                - iam:DetachRolePolicy
                - iam:ListPolicyVersions
                - iam:DeleteRole
                - iam:TagRole
                - iam:UpdateAssumeRolePolicy
              Resource: "*"
        - PolicyName: Cloudformation_Base_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - cloudformation:ListStacks
                - cloudformation:DescribeStackEvents
                - cloudformation:CreateStack
                - cloudformation:UpdateStack
                - cloudformation:CreateChangeSet
                - cloudformation:UpdateStackSet
                - cloudformation:DescribeChangeSet
                - cloudformation:ExecuteChangeSet
                - cloudformation:CreateStackSet
                - cloudformation:GetTemplateSummary
                - cloudformation:DescribeStacks
              Resource: "*"
        - PolicyName: EventBridge_Base_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - events:DescribeRule
                - events:PutRule
                - events:RemoveTargets
                - events:DeleteRule
                - events:PutTargets
              Resource: "*"

  #CodePipline IAM Roles:
  SAMCodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AWSCodePipelineServiceRole-${ProjectName}-${Environment}-sam-deploy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref SAMCodepipelineCustomManagedPolicy

  #CloudWatchevent IAM Role
  SAMCWEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cwe-role-${AWS::Region}-${ProjectName}-sam-deploy-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref SAMPipelineexecuteCustomManagedPolicy

  #CloudwatcheventPolicy:
  SAMPipelineexecuteCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub start-pipeline-execution-${ProjectName}-sam-deploy-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource:
            - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-sam-deploy-${Environment}

  #CodeBuildbasePolicy
  SAMCodebuildCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub CodeBuildBasePolicy-${ProjectName}-sam-deploy-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-sam-deploy
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-${Environment}-sam-deploy:*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          - Effect: Allow
            Action:
            - codebuild:CreateReportGroup
            - codebuild:CreateReport
            - codebuild:UpdateReport
            - codebuild:BatchPutTestCases
            - codebuild:BatchPutCodeCoverages
            Resource:
            - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ProjectName}-${Environment}-sam-deploy-*

  #CodePipelineBasePolicy:
  SAMCodepipelineCustomManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AWSCodePipelineServiceRole-${ProjectName}-sam-deploy-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"

  #BuildProjects:
  SAMCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-sam-deploy"
      Description: !Sub "${Environment}-sam-deploy"
      Source:
        BuildSpec: "buildspec-sam.yml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: !Sub "${ProjectName}-${Environment}-sam-deploy"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: "BUCKET_NAME"
            Type: "PLAINTEXT"
            Value: !Ref SamDeployS3Bucket
          - Name: "Environment"
            Type: "PLAINTEXT"
            Value: !Sub ${Environment}
          - Name: "ProjectName"
            Type: "PLAINTEXT"
            Value: !Sub ${ProjectName}
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt SAMCodeBuildServiceRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"
    DependsOn: SAMCodeBuildServiceRole

  #CodePipelines:
  SAMCodePipelinePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${ProjectName}-sam-deploy-${Environment}"
      RoleArn: !GetAtt SAMCodepipelineServiceRole.Arn
      ArtifactStore:
        Location: !Sub "codepipeline-${AWS::Region}-artifacts-${ProjectName}-${Environment}"
        Type: "S3"
      Stages:
      -
        Name: "Source"
        Actions:
        -
          Name: "Source"
          ActionTypeId:
            Category: "Source"
            Owner: "AWS"
            Provider: "CodeStarSourceConnection"
            Version: "1"
          Configuration:
            BranchName: main
            ConnectionArn: !Sub arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodeStarConnectionID}
            FullRepositoryId: "SaranNal/samdeploy"
            OutputArtifactFormat: "CODE_ZIP"
          OutputArtifacts:
          -
            Name: "SourceArtifact"
          Region: !Ref AWS::Region
          Namespace: "SourceVariables"
          RunOrder: 1
      -
        Name: "Build"
        Actions:
        -
          Name: "Build"
          ActionTypeId:
            Category: "Build"
            Owner: "AWS"
            Provider: "CodeBuild"
            Version: "1"
          Configuration:
            ProjectName: !Ref SAMCodeBuildProject
          InputArtifacts:
          -
            Name: "SourceArtifact"
          OutputArtifacts:
          -
            Name: "BuildArtifact"
          Region: !Ref AWS::Region
          Namespace: "BuildVariables"
          RunOrder: 1
    DependsOn: SAMCodepipelineCustomManagedPolicy