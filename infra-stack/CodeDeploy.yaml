AWSTemplateFormatVersion: "2010-09-09"
Description: This stack is for creating CodeDeploy.
Parameters:
  Environment:
    Type: String
  ProjectName:
    Type: String
  TargetGroup1Name:
    Type: String
  TargetGroup2Name:
    Type: String
  ProdListener:
    Type: String
  TestListener:
    Type: String
  Production:
    Type: String
    Default: STOP_DEPLOYMENT
  Staging:
    Type: String
    Default: STOP_DEPLOYMENT
  Development:
    Type: String
    Default: CONTINUE_DEPLOYMENT
  ProductionWaitTimeInMinutes:
    Type: String
    Default: 600
  StagingWaitTimeInMinutes:
    Type: String
    Default: 600
  DevelopmentWaitTimeInMinutes:
    Type: String
    Default: 0
  ProductionTerminationWaitTimeInMinutes:
    Type: String
    Default: 60
  StagingTerminationWaitTimeInMinutes:
    Type: String
    Default: 60
  DevelopmentTerminationWaitTimeInMinutes:
    Type: String
    Default: 0
  


#Description: Passing Condition to create a respective environment
Conditions:
  ProdEnv: !Equals [ !Ref Environment, prod ]
  DevEnv: !Equals [ !Ref Environment, dev ]
  StageEnv: !Equals [ !Ref Environment, stage ]

Resources:
  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Sub "AppECS-${ProjectName}-${Environment}"
      ComputePlatform: "ECS"

  CodeDeployDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "DgpECS-${ProjectName}-${Environment}"
      DeploymentConfigName: "CodeDeployDefault.ECSAllAtOnce"
      ServiceRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-${Environment}-bluegreen-application-deploy-service"
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: !If [ ProdEnv, !Ref Production, !If [ StageEnv, !Ref Staging, !Ref Development ]]
          WaitTimeInMinutes: !If [ ProdEnv, !Ref ProductionWaitTimeInMinutes, !If [ StageEnv, !Ref StagingWaitTimeInMinutes, !Ref DevelopmentWaitTimeInMinutes ]]
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: !If [ ProdEnv, !Ref ProductionTerminationWaitTimeInMinutes, !If [ StageEnv, !Ref StagingTerminationWaitTimeInMinutes, !Ref DevelopmentTerminationWaitTimeInMinutes ]]
      AlarmConfiguration:
        Enabled: false
        IgnorePollAlarmFailure: false
      AutoRollbackConfiguration:
        Enabled: true
        Events:
        - "DEPLOYMENT_FAILURE"
      TriggerConfigurations:
      -
        TriggerEvents:
        - "DeploymentStart"
        - "DeploymentSuccess"
        - "DeploymentFailure"
        - "DeploymentStop"
        - "DeploymentReady"
        - "DeploymentRollback"
        TriggerName: !Sub "${ProjectName}-${Environment}-notifyCodeDeployStatusToTeams"
        TriggerTargetArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-notifyCodeDeployStatusToTeams"
      DeploymentStyle:
        DeploymentType: "BLUE_GREEN"
        DeploymentOption: "WITH_TRAFFIC_CONTROL"
      ECSServices:
        - ClusterName: !Sub ${ProjectName}-${Environment}
          ServiceName: !Sub ${Environment}
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          -
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ProdListener
            TargetGroups:
              -
                Name: !Ref TargetGroup1Name
              -
                Name: !Ref TargetGroup2Name
            TestTrafficRoute:
                ListenerArns:
                  - !Ref TestListener

